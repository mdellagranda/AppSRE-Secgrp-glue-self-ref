{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Condition": {
      "Null": {
          "aws:RequestTag/ProductId": "false"
      },
      "ForAnyValue:StringNotEquals": {
          "aws:RequestTag/ProductId": "${aws:PrincipalTag/ProductId}",
          "kms:ResourceAliases": [
              "alias/glue-catalog-key",
              "alias/glue-connection-key"
          ]
      }
  },
  "Action": "*",
  "Resource": "*",
  "Effect": "Deny",
  "Sid": "ProtectProductIdTagNS"
},
{ 
  "Condition": {
      "Null": {
          "aws:RequestTag/ProductName": "false"
      },
      "ForAnyValue:StringNotEquals": {
          "aws:RequestTag/ProductName": "${aws:PrincipalTag/ProductName}",
          "kms:ResourceAliases": [
              "alias/glue-catalog-key",
              "alias/glue-connection-key"
          ]
      }
  },
  "Action": "*",
  "Resource": "*",
  "Effect": "Deny",
  "Sid": "ProtectProductNameTagNS"
},
{
  "Condition": {
      "Null": {
          "aws:ResourceTag/ProductId": "false"
      },
      "StringNotEquals": {
          "aws:ResourceTag/ProductId": "${aws:PrincipalTag/ProductId}"
      },
      "ForAnyValue:StringNotEquals": {
          "kms:ResourceAliases": [
              "alias/glue-catalog-key",
              "alias/glue-connection-key"
          ]
      }
  },
  "Action": "*",
  "Resource": "*",
  "Effect": "Deny",
  "Sid": "DenyAccessToResourcesWithDifferentProductIdTagNSB"
},
        {
            "Sid": "IAMAttachPolicy",
            "Effect": "Allow",
            "Action": [
                "iam:*tachRolePolicy",
                "iam:PutRolePermissionsBoundary"
            ],
            "Resource": [
                "*"
            ]
        },
        {  
            "Sid": "IAMWrite",
            "Effect": "Allow",
            "Action": [
                "iam:TagRole",
                "iam:CreateRole",
                "iam:*OpenIDConnectProvider",
                "iam:DeleteRole",
                "iam:*tachRolePolicy",
                "iam:UpdateAssumeRolePolicy"
            ],
            "Resource":    [
               "arn:aws:iam::${AWS::AccountId}:role/AWSGlueServiceRole-${pProductId}-${pProductName}",
              "arn:aws:iam::${AWS::AccountId}:role/AWSGlueLoggingRole-${pProductId}-${pProductName}",
              "arn:aws:iam::${AWS::AccountId}:role/glue-${pProductId}-${pProductName}-*"
            ]
        },
        {
            "Sid": "PolicyWrite",
            "Effect": "Allow",
            "Action": [
                "iam:DeletePolicy*",
                "iam:CreatePolicy*",
                "iam:TagPolicy",
                "iam:UntagPolicy",
                "iam:List*",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:GetPolicy"
            ],
            "Resource": [
                "*"
            ]
        },
        {  
            "Sid": "IAMRead",
            "Effect": "Allow",
            "Action": [
                "iam:Get*",
                "iam:List*"
            ],
            "Resource":  [ 
                "arn:aws:iam::${AWS::AccountId}:policy/*",
                "arn:aws:iam::${AWS::AccountId}:oidc-provider/*",
                "arn:aws:iam::${AWS::AccountId}:role/*"
            ]
        },
        {   
            "Sid": "IAMWriteOnboarding",
            "Effect": "Allow",
            "Action": [
                "iam:CreateRole"
            ],
            "Resource":  [
                "arn:aws:iam::${AWS::AccountId}:role/AWSGlueServiceRole-${pProductId}-${pProductName}"
            ],
            "Condition": {
                "StringEquals": {
                    "iam:PermissionsBoundary": "arn:aws:iam::${AWS::AccountId}:policy/${pPlatformNamePrefix}-Glue-Namespace-BoundaryPolicy"
                }
            }
        },
        {
        "Action": [
            "lambda:AddPermission",
            "lambda:GetFunctionCodeSigningConfig",
            "lambda:CreateFunction",
            "lambda:ListVersionsByFunction",
            "lambda:GetPolicy",
            "lambda:GetFunction",
            "lambda:UpdateFunctionCode",
            "lambda:DeleteFunction",
            "lambda:CreateEventSourceMapping"
        ],
        "Effect": "Allow",
        "Resource": [
            "*"
        ],
        "Sid": "LambdaPermissions"
        },
        {
            "Sid": "S3Permissions",
            "Effect": "Allow",
            "Action": [
                "s3:Put*",
                "s3:Get*",
                "s3:List*",
                "s3:Create*",
                "s3:Delete*",
                "s3:AbortMultipartUpload",
                "kms:DescribeKey"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Sid": "MiscPermissions",
            "Effect": "Allow",
            "Action": [
                "sts:GetCallerIdentity",
                "ec2:DeleteLaunchTemplate",
                "ec2:*Tags",
                "ec2:Describe*",
                "ec2:RunInstances",
                "ec2:CreateLaunchTemplate*",
                "ec2:ModifyLaunchTemplate",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DescribeAccountAttributes",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:CreateVolume",
                "ec2:CreateSnapshot",
                "ec2:DeleteSnapshot",
                "route53:ListHostedZones",
                "kms:ListAliases",
                "servicecatalog:ProvisionProduct",
                "servicecatalog:ScanProvisionedProducts",
                "servicecatalog:Search*",
                "servicecatalog:ListProvisioningArtifacts",
                "servicecatalog:AssociatePrincipalWithPortfolio",
                "servicecatalog:DescribeProvisionedProduct",
                "ssm:GetParameter*"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Sid": "ServiceCatalogForSelf",
            "Effect": "Allow",
            "Action": [
                "servicecatalog:TerminateProvisionedProduct",
                "servicecatalog:GetProvisionedProductOutputs",
                "servicecatalog:UpdateProvisionedProduct",
                "servicecatalog:UpdateProvisionedProductProperties"
            ],
            "Resource": [
                "*"
            ],
            "Condition": {
                "StringEquals": {
                "servicecatalog:roleLevel": "servicecatalog:roleLevel"
                }
            }
        },
        {
            "Sid": "CloudWatchNSecrets",
            "Effect": "Allow",
            "Action": [
                "logs:AssociateKmsKey",
                "logs:CreateLog*",
                "logs:PutLogEvents",
                "logs:PutRetentionPolicy",
                "logs:Describe*",
                "logs:ListTagsLogGroup",
                "logs:TagLogGroup",
                "logs:UntagLogGroup",
                "logs:PutSubscriptionFilter",
                "secretsmanager:ListSecrets"
            ],
            "Resource": [
                "*"
            ]
        },
        {
        "Action": [
            "logs:DeleteSubscriptionFilter",
            "logs:DeleteLogGroup"
        ],
        "Effect": "Allow",
        "Resource": [
            "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/*"
        ],
        "Sid": "CloudWatchDeleteSubFilter"
        },
        {  
            "Sid": "ManageMySecrets",
            "Effect": "Allow",
            "Action": [
                "secretsmanager:*Secret*",
                "secretsmanager:TagResource"
            ],
            "Resource": [
                "arn:aws:secretsmanager:*:${AWS::AccountId}:secret:glue-${pProductId}-${pProductName}-*"
            ]
        },
        {
            "Sid": "AllowKMSActions",
            "Effect": "Allow",
            "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:GenerateDataKey*",
                "kms:*KeyRotation*",
                "kms:DescribeKey",
                "kms:CreateGrant",
                "kms:GetKeyPolicy",
                "kms:PutKeyPolicy",
                "kms:ListResourceTags",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:CreateKey",
                "kms:*Alias",
                "kms:ScheduleKeyDeletion"
            ],
            "Resource": [
                "*"
            ]
        },
        {  
            "Sid": "AllowEventBridgeActions",
            "Effect": "Allow",
            "Action": [
                "events:*Rule",
                "events:*Resource",
                "events:*Targets*"
            ],
            "Resource": [
                "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/glue-${pProductId}-${pProductName}-*"
            ]
        },
        {
            "Sid": "GlueStepFunctions",
            "Action": [
                "glue:*",
                "states:*",
                "sns:*",
                "ses:*"
            ],
            "Resource": [
                "*"
            ],
            "Effect": "Allow"
        },
        {
            "Sid": "Security Group Rules Permissions",
            "Action": [
                "ec2:AuthorizedSecurityGroupEgress",
                "ec2:AuthorizedSecurityGroupIngress",
                "ec2:CreateSecurityGroup",
                "ec2:DeleteSecurityGroup",
                "ec2:DescribeSecurityGroupRules",
                "ec2:ModifySecurityGroups",
                "ec2:RevokeSecurityEgress",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:RevokeSecurityGroupIngress"
            ],
            "Resource": [
                "*"
            ],
            "Effect": "Allow"
        }
    ]
}